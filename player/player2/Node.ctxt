#BlueJ class context
comment0.target=Node()
comment1.params=nodeValue
comment1.target=Node(String)
comment1.text=\nConstructor\ for\ a\ new\ node\n@param\ nodeValue\ String\n\n
comment10.params=node
comment10.target=void\ remove(Node)
comment10.text=\nRemoves\ a\ node\nlinks\ the\ node\ before\ the\ index\ node\ to\ the\ index\ after\ the\ index\ node\n@param\ index\n\n
comment11.target=int\ size()
comment11.text=\nReturns\ the\ current\ lenght\ of\ the\ linkedlist\n@return\ int\n\n
comment12.params=index
comment12.target=Node\ get(int)
comment12.text=\nGets\ a\ node\ in\ the\ linklist\ at\ an\ index\ point\n@param\ index\n@return\n\n
comment13.params=node
comment13.target=String[]\ splitNodeValue(Node)
comment13.text=\nSplits\ up\ the\ nodes\ value\ into\ 3\ separate\ parts\ to\ we\ can\ work\ with\ it\ easier\n@param\ node\n@return\ String[]\n\n
comment14.target=Node[]\ toArray()
comment14.text=\nReturns\ the\ linked\ List\ as\ an\ array\n@return\ Node[]\n\n
comment15.params=option\ str
comment15.target=Node[]\ toArray(int,\ String)
comment15.text=\nReturns\ the\ linked\ List\ as\ an\ array\ where\ the\ option\ \=\ track,\ artist\ or\ genre\n@param\ int\ track\ \=\ 0,\ artist\ \=1,\ genre\ \=\ 2\n@param\ String\ what\ your\ looking\ for\n@return\ Node[]\n\n
comment16.params=str
comment16.target=int\ binarySearch(String)
comment16.text=\nToo\ limited\ by\ the\ constraints\ of\ java\ and\ project\ specifications\ to\ implement\ the\ way\ would\ like\ it\nIn\ java\ with\ the\ spec\ aside,\ i\ would\ have\ a\ hash\ map,\ pointing\ to\ each\ node,\ and\ using\ the\ hash\ map\ to\ implment\ the\ binary\ search\nJava\ aside,\ pointers.......\ stl?\n\nCurrenly\ puts\ all\ the\ nodes\ into\ a\ Node\ array\ and\ searches\ them\n\n@param\ str\ startsWith\n@return\ int\ \n\n
comment17.target=void\ clear()
comment17.text=\nSets\ the\ headNode\ to\ null\nSets\ the\ tailNode\ to\ null\nFine\ garbage\ collector\nThereby\ orphaning\ the\ linkedlist\n\n
comment2.target=Node\ getHeadNode()
comment2.text=\nReturns\ the\ head\ node\n@return\ Node\n\n
comment3.target=Node\ getTailNode()
comment3.text=\nReturns\ the\ tail\ node\n@return\ Node\n\n
comment4.target=String\ getNodeValue()
comment4.text=\nGets\ the\ value\ stored\ in\ this\ node\n@return\ String\n\n
comment5.params=nextNode
comment5.target=void\ setNextNode(Node)
comment5.text=\nSets\ the\ node\ that\ this\ node\ points\ to\n@param\ nextNode\n\n
comment6.target=Node\ getNextNode()
comment6.text=\nGets\ the\ next\ node\ that\ this\ node\ points\ to\n@return\ node\n\n
comment7.params=prevNode
comment7.target=void\ setPrevNode(Node)
comment7.text=\nSets\ the\ node\ that\ this\ node\ points\ to\n@param\ nextNode\n\n
comment8.target=Node\ getPrevNode()
comment8.text=\nGets\ the\ next\ node\ that\ this\ node\ points\ to\n@return\ node\n\n
comment9.params=newNodeValue
comment9.target=boolean\ insert(String)
comment9.text=\nCreates\ a\ new\ instance\ of\ itself\nCorrectly\ places\ itself\ in\ the\ linkedlist\nDoes\ not\ accept\ duplicates\n@param\ newNodeValue\ Value\ of\ the\ Node\ \n\n
numComments=18
